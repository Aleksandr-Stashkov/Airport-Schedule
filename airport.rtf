{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil\fcharset1 Segoe UI Symbol;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang1033 #include <iostream>\par
#include <iomanip>\par
#include <stdlib.h>\par
#include <stdio.h>\par
#include <math.h>\par
#include <time.h>\par
\par
using namespace std;\par
\par
/*Enum*/\par
\par
enum stage\{\par
    sleep = 0,\par
    search1 = 1,\par
    wait1 = 2,\par
    wait2 = 3,\par
    search2 = 4,\par
    done = 5\par
\};\par
inline stage& operator++(stage& current, int)\{\par
    const int i = static_cast<int>(current);\par
    current = static_cast<stage>((i + 1) % 6);\par
    return current;\par
\}\par
\par
/*Airports*/\par
\par
const string AirportNames[] = \{"Maimi","Moskau","Brno","Hamburg","New York","Wien","Paris","Budapest","Prague","Istambul","Toronto","Madrid","Amsterdam","Doha","London","Munich","Dusseldorf","Stuttgart","Dublin","Frankfurt","Warsaw","Geneva","Milan","Rome","Zurich","Athens"\};\par
const int AirportTimes[] = \{596, 139, 62, 46, 481, 70, 101, 84, 48, 148, 488, 157, 75, 338, 106, 68, 66, 69, 118, 61, 69, 101, 98, 108, 83, 153\};\par
const short N_airports = sizeof(AirportNames)/sizeof(AirportNames[0]);\par
struct airport\{\par
    const string * name;\par
    const int * t_flight;\par
  \par
    airport() : name(0), t_flight(0) \{\};\par
\};\par
airport airports[N_airports];\par
\par
/*Gate*/\par
\par
struct gate\{\par
    private:\par
        short timer;\par
    public:\par
        bool occ;\par
        short id;\par
    \par
        gate(int n) : occ(false), id(n), timer(0) \{\};\par
        void step();\par
        void set_timer(int t);\par
\};\par
void gate::step()\{\par
    if (timer > 0)\{\par
        timer--;\par
    \}    \par
    if (timer == 0)\{\par
        occ = false;\par
    \}\par
\}\par
void gate::set_timer(int t)\{\par
    occ = true;\par
    timer = t;\par
\}\par
\par
/*Runway*/\par
\par
struct runway\{\par
    private:\par
        short timer;\par
    public:\par
        bool occ;\par
        short id;\par
    \par
        runway(int n) : occ(false), id(n), timer(0) \{\};\par
        void step();\par
        void set_timer(int t);\par
\};\par
void runway::step()\{\par
    if (timer > 0)\{\par
        timer--;\par
    \}\par
    if (timer == 0)\{\par
        occ = false;\par
        \par
    \}\par
\}\par
void runway::set_timer(int t)\{\par
    occ = true;\par
    timer = t;\par
\}\par
\par
/*Plane*/\par
\par
struct plane\{\par
    private:\par
        short timer;\par
    public:\par
        stage st;\par
        string id;\par
        airport * ap;\par
        signed t_arr, t_dep, t_act;\par
        int delay, t_ch1, t_ch2, t_fact;\par
        bool dep, emerg;\par
        short gate_id, run_id;\par
        \par
        plane(bool dep_in, int t);\par
        void gen_id(plane *mass[], int N);\par
        void set_act(int t);\par
        void set_timer(int t);\par
        bool timer0();\par
        void step(signed t);\par
        bool get_gate(gate *mass[], int N, int t);\par
        bool get_run(runway *mass[], int N, int t);\par
\};\par
plane::plane(bool dep_in, int t)\{\par
    short rnd = rand() %N_airports;\par
    \par
    timer = 0;\par
    emerg = false;\par
    st = sleep;\par
    ap = &airports[rnd];\par
    id = "-";\par
    delay = 0;\par
    t_act = 0;\par
    t_ch1 = 0;\par
    t_ch2 = 0;\par
    t_fact = 0;\par
    \par
    if (dep_in)\{\par
        dep = true;\par
        t_dep = rand() %t;\par
        t_arr = t_dep + *airports[rnd].t_flight;\par
    \}\par
    else\{\par
        dep = false;\par
        t_arr = rand() %t;\par
        t_dep = t_arr - *airports[rnd].t_flight;\par
    \}\par
\}\par
void plane::gen_id(plane *mass[], int N)\{\par
    bool x(true);\par
    string tmp_id("-");\par
    \par
    while (x == true)\{\par
        tmp_id = to_string(rand() %9) + to_string(rand() %9) + to_string(rand() %9);\par
        x = false;\par
        \par
        for (int i=0; i<N; i++)\{\par
            if (tmp_id == mass[i]->id)\{\par
                x = true;\par
            \}\par
        \}\par
    \}\par
    \par
    id = tmp_id;\par
\}\par
void plane::set_act(int t)\{\par
    if (dep == false)\{\par
        t_act = t_arr-t;\par
    \}else\{\par
        t_act = t_dep-t;\par
    \}\par
\}\par
void plane::set_timer(int t)\{\par
    timer = t;\par
\}\par
bool plane::timer0()\{\par
    if (timer == 0)\{\par
        return true;\par
    \}else\{\par
        return false;\par
    \}\par
\}\par
void plane::step(signed t)\{\par
    if (timer > 0)\{\par
        timer--;\par
    \}\par
    if (st == search1)\{\par
        t_ch1++;\par
    \}\par
    if (st == search2)\{\par
        t_ch2++;\par
    \}\par
    if (timer == 0)\{\par
        if (st == wait1 || st == wait2)\{\par
            st++;\par
        \}\par
    \}\par
    if (st == sleep)\{\par
        if (t == t_act)\{\par
            st++;\par
        \}\par
    \}\par
\}\par
bool plane::get_gate(gate *mass[], int N, int t)\{\par
    int i(0);\par
    \par
    while (i < N)\{\par
        if (mass[i]->occ == false)\{\par
            mass[i]->set_timer(t);\par
            set_timer(t);\par
            gate_id = mass[i]->id;\par
            st++;\par
            emerg = false;\par
            return true;\par
        \}\par
        i++;\par
    \}\par
    emerg = true;\par
    return false;\par
\}\par
bool plane::get_run(runway *mass[], int N, int t)\{\par
    int i(0);\par
    \par
    while (i < N)\{\par
        if (mass[i]->occ == false)\{\par
            mass[i]->set_timer(t);\par
            set_timer(t);\par
            run_id = mass[i]->id;\par
            st++;\par
            emerg = false;\par
            return true;\par
        \}\par
        i++;\par
    \}\par
    emerg = true;\par
    return false;\par
\}\par
\par
/*Sorting*/\par
\par
void swap(plane *pl1, plane *pl2)\{\par
    plane temp(*pl1);\par
    *pl1 = *pl2;\par
    *pl2 = temp;\par
\}\par
\par
int part_arr(plane *mass[], int low, int high)\{\par
    signed pivot = mass[high]->t_arr;\par
    int i(low);\par
    \par
    for (int j=low; j<high; j++)\{\par
        if (mass[j]->t_arr <= pivot)\{\par
            swap(mass[i],mass[j]);\par
            i++;\par
        \}\par
    \}\par
    swap(mass[i],mass[high]);\par
    \par
    return (i);\par
\}\par
void quick_arr(plane *mass[], int low, int high)\{\par
    if (low < high)\{\par
        int p = part_arr(mass,low,high);\par
        quick_arr(mass,low,p-1);\par
        quick_arr(mass,p+1,high);\par
    \}\par
\}\par
\par
int part_dep(plane *mass[], int low, int high)\{\par
    signed pivot = mass[high]->t_dep;\par
    int i(low);\par
    \par
    for (int j=low; j<high; j++)\{\par
        if (mass[j]->t_dep <= pivot)\{\par
            swap(mass[i],mass[j]);\par
            i++;\par
        \}\par
    \}\par
    swap(mass[i],mass[high]);\par
    \par
    return (i);\par
\}\par
void quick_dep(plane *mass[], int low, int high)\{\par
    if (low < high)\{\par
        int p = part_dep(mass,low,high);\par
        quick_dep(mass,low,p-1);\par
        quick_dep(mass,p+1,high);\par
    \}\par
\}\par
\par
/*Main*/\par
\par
int main()\par
\{\par
    /* Given */\par
    \par
    double th(1);       //time period for simulation in hours\par
    \par
    short f_arr(20);     //number of arrivals per hour\par
    short f_dep(20);     //number of departures per hour\par
    \par
    short N_run(3);     //number of runways\par
    short N_gate(40);   //number of gates\par
    int t_r_arr(15);    //time for a runway to clear for arriving plane in minutes\par
    int t_r_dep(2);     //time for a runway to clear for departing plane in minutes\par
    int t_r_r(5);       //time for repeat of runway request\par
    int t_g_arr(25);    //time for a gate to clear for arriving plane in minutes\par
    int t_g_dep(50);    //time for a gate to clear for departing plane in minutes\par
    int t_rg(2);        //time for runway-gate travel in minutes\par
    int t_gr(4);        //time for gate-runway travel in minutes\par
    \par
    /* Check */\par
    \par
    if (sizeof(AirportTimes)/sizeof(AirportTimes[0]) != N_airports)\{\par
        cout << "Airports' data is corrupted." << endl;\par
        return 0;\par
    \}\par
    if (f_arr+f_dep <= 0)\{\par
        cout << "The airport is closed. No flights are available." << endl;\par
        return 0;\par
    \}\par
    if (N_run <= 0)\{\par
        cout << "The airport is closed. All runways are under reconstruction." << endl;\par
        return 0;\par
    \}\par
    if (N_gate <= 0)\{\par
        cout << "The airport is closed. All gates are under reconstruction." << endl;\par
        return 0;\par
    \}\par
    if (t_rg < 0 || t_gr < 0 || t_r_r < 0 || t_g_dep < 0 || t_g_arr < 0 || t_r_dep < 0 || t_r_arr < 0)\{\par
        cout << "Some of the times set are negative or zero leading to god knows what results." << endl;\par
        return 0;\par
    \}\par
    \par
    /* Initialisation */\par
    \par
    srand(time(NULL));\par
    \par
    for (int i=0; i<N_airports; i++)\{\par
        airports[i].name = &AirportNames[i];\par
        airports[i].t_flight = &AirportTimes[i];\par
    \}\par
    \par
    int tmin = floor(th*60);\par
    int N_p_arr = round(f_arr*th);\par
    int N_p_dep = round(f_dep*th);\par
    signed t(0);\par
    signed t_shift(0);\par
    int N_done(0);\par
    \par
    plane * planes[N_p_arr+N_p_dep];\par
    for (int i=0; i<N_p_arr; i++)\{\par
        plane *pl = new plane(false,tmin);\par
        planes[i] = pl;\par
        planes[i]->set_act(t_r_arr+t_rg);\par
    \}\par
    for (int i=0; i<N_p_dep; i++)\{\par
        plane *pl = new plane(true,tmin);\par
        planes[i+N_p_arr] = pl;\par
        planes[i+N_p_arr]->set_act(t_g_dep+t_gr+t_r_dep);\par
    \}\par
    for (int i=0; i<N_p_arr+N_p_dep; i++)\{\par
        planes[i]->gen_id(planes, N_p_arr+N_p_dep);\par
        if (t_shift > planes[i]->t_act)\{\par
            t_shift = planes[i]->t_act;\par
        \}\par
    \}\par
    \par
    runway * runways[N_run];\par
    for (int i=0; i<N_run; i++)\{\par
        runway *rw = new runway(i+1);\par
        runways[i] = rw;\par
    \}\par
    \par
    gate * gates[N_gate];\par
    for (int i=0; i<N_gate; i++)\{\par
        gate *gt = new gate(i+1);\par
        gates[i] = gt;\par
    \}\par
    \par
    /* Processing */\par
    \par
    while (N_done != N_p_arr+N_p_dep)\{\par
        for (int i=0; i<N_gate; i++)\{\par
            if (gates[i]->occ == true)\{\par
                gates[i]->step();\par
            \}\par
        \}\par
        for (int i=0; i<N_run; i++)\{\par
            if (runways[i]->occ == true)\{\par
                runways[i]->step();\par
            \}\par
        \}\par
        for (int i=0; i<N_p_arr+N_p_dep; i++)\{\par
            if (planes[i]->st != done)\{\par
                planes[i]->step(t+t_shift);\par
            \}\par
        \}\par
        for (int i=0; i<N_p_arr+N_p_dep; i++)\{\par
            if (planes[i]->st != done && planes[i]->emerg == true)\{\par
                if (planes[i]->st == search1 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        if (planes[i]->get_run(runways,N_run,t_r_arr) == false)\{\par
                            planes[i]->set_timer(t_r_r);\par
                        \}\par
                    \}else\{\par
                        if (planes[i]->get_gate(gates,N_gate,t_g_dep) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}\par
                    \}\par
                \}\par
                \par
                if (planes[i]->st == wait2 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        planes[i]->set_timer(t_rg);\par
                    \}else\{\par
                        planes[i]->set_timer(t_gr);\par
                    \}\par
                \}\par
                \par
                if (planes[i]->st == search2 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        if (planes[i]->get_gate(gates,N_gate,t_g_arr) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}else\{\par
                            N_done++;\par
                            planes[i]->t_fact = t+t_shift;\par
                            if (planes[i]->t_fact > planes[i]->t_arr)\{\par
                                planes[i]->delay = planes[i]->t_fact-planes[i]->t_arr;\par
                            \}\par
                        \}\par
                    \}else\{\par
                        if (planes[i]->get_run(runways,N_run,t_r_dep) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}else\{\par
                            N_done++;\par
                            planes[i]->t_fact = t+t_shift;\par
                            if (planes[i]->t_fact > planes[i]->t_dep)\{\par
                                planes[i]->delay = planes[i]->t_fact-planes[i]->t_dep;\par
                            \}\par
                            if (planes[i]->t_ch2 > 0)\{\par
                                planes[i]->t_ch2--;\par
                            \}\par
                        \}\par
                    \}\par
                \}\par
            \}\par
        \}\par
        for (int i=0; i<N_p_arr+N_p_dep; i++)\{\par
            if (planes[i]->st != done && planes[i]->emerg == false)\{\par
                if (planes[i]->st == search1 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        if (planes[i]->get_run(runways,N_run,t_r_arr) == false)\{\par
                            planes[i]->set_timer(t_r_r);\par
                        \}\par
                    \}else\{\par
                        if (planes[i]->get_gate(gates,N_gate,t_g_dep) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}\par
                    \}\par
                \}\par
                \par
                if (planes[i]->st == wait2 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        planes[i]->set_timer(t_rg);\par
                    \}else\{\par
                        planes[i]->set_timer(t_gr);\par
                    \}\par
                \}\par
                \par
                if (planes[i]->st == search2 && planes[i]->timer0() == true)\{\par
                    if (planes[i]->dep == false)\{\par
                        if (planes[i]->get_gate(gates,N_gate,t_g_arr) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}else\{\par
                            N_done++;\par
                            planes[i]->t_fact = t+t_shift;\par
                            if (planes[i]->t_fact > planes[i]->t_arr)\{\par
                                planes[i]->delay = planes[i]->t_fact-planes[i]->t_arr;\par
                            \}\par
                        \}\par
                    \}else\{\par
                        if (planes[i]->get_run(runways,N_run,t_r_dep) == false)\{\par
                            planes[i]->set_timer(1);\par
                        \}else\{\par
                            N_done++;\par
                            planes[i]->t_fact = t+t_shift;\par
                            if (planes[i]->t_fact > planes[i]->t_dep)\{\par
                                planes[i]->delay = planes[i]->t_fact-planes[i]->t_dep;\par
                            \}\par
                            if (planes[i]->t_ch2 > 0)\{\par
                                planes[i]->t_ch2--;\par
                            \}\par
                        \}\par
                    \}\par
                \}\par
            \}\par
        \}\par
        t++;\par
    \}\par
    \par
    /* Output */\par
    \par
    quick_arr(planes,0,N_p_arr-1);\par
    quick_dep(planes,N_p_arr,N_p_arr+N_p_dep-1);\par
    \par
    int curt = 12*60;\par
\par
    cout<<setw(40)<<"Arrivals"<<endl;\par
    cout\par
    <<setw(7)<<"\f1\u8470?\f0  |"\par
    <<setw(12)<<"From  |"\par
    <<setw(12)<<"To  |"\par
    <<setw(11)<<"Dep Time |"\par
    <<setw(11)<<"Arr Time |"\par
    <<setw(14)<<"Fact Arr |"\par
    <<setw(9)<<"Runway |"\par
    <<setw(7)<<"Gate |"\par
    <<setw(12)<<"Run Delay |"\par
    <<setw(13)<<"Gate Delay |"\par
    <<setw(6)<<"Delay"\par
    <<endl;\par
    for (int i=0; i<N_p_arr; i++)\{\par
        cout\par
        <<setw(4)<<planes[i]->id<<"|"\par
        <<setw(11)<<*(planes[i]->ap->name)<<"|"\par
        <<setw(12)<<"Berlin|"\par
        <<setw(6)<<floor((planes[i]->t_dep+curt)/60)<<":";\par
        if ((planes[i]->t_dep+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_dep+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_dep+curt)%60<<" |";\par
        \}\par
        cout<<setw(6)<<floor((planes[i]->t_arr+curt)/60)<<":";\par
        if ((planes[i]->t_arr+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_arr+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_arr+curt)%60<<" |";\par
        \}\par
        cout<<setw(9)<<floor((planes[i]->t_fact+curt)/60)<<":";\par
        if ((planes[i]->t_fact+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_fact+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_fact+curt)%60<<" |";\par
        \}\par
        cout<<setw(5)<<planes[i]->run_id<<"   |"\par
        <<setw(4)<<planes[i]->gate_id<<"  |";\par
        if (planes[i]->t_ch1 == 0)\{\par
            cout<<setw(12)<<"- |";\par
        \}else\{\par
            cout<<setw(7)<<floor(planes[i]->t_ch1/60)<<":";\par
            if (planes[i]->t_ch1%60 > 9)\{\par
                cout<<planes[i]->t_ch1%60<<" |";\par
            \}else\{\par
                cout<<"0"<<planes[i]->t_ch1%60<<" |";\par
            \}\par
        \}\par
        if (planes[i]->t_ch2 == 0)\{\par
            cout<<setw(13)<<"- |";\par
        \}else\{\par
            cout<<setw(8)<<floor(planes[i]->t_ch2/60)<<":";\par
            if (planes[i]->t_ch2%60 > 9)\{\par
                cout<<planes[i]->t_ch2%60<<" |";\par
            \}else\{\par
                cout<<"0"<<planes[i]->t_ch2%60<<" |";\par
            \}\par
        \}\par
        if (planes[i]->delay == 0)\{\par
            cout<<setw(6)<<"-"<<endl;\par
        \}else\{\par
            cout<<setw(3)<<floor(planes[i]->delay/60)<<":";\par
            if (planes[i]->delay%60 > 9)\{\par
                cout<<planes[i]->delay%60<<endl;\par
            \}else\{\par
                cout<<"0"<<planes[i]->delay%60<<endl;\par
            \}\par
        \}\par
    \}\par
    \par
    cout<<setw(40)<<"Departures"<<endl;\par
    cout\par
    <<setw(7)<<"\f1\u8470?\f0  |"\par
    <<setw(12)<<"From  |"\par
    <<setw(12)<<"To  |"\par
    <<setw(11)<<"Dep Time |"\par
    <<setw(11)<<"Arr Time |"\par
    <<setw(14)<<"Fact Dep |"\par
    <<setw(9)<<"Runway |"\par
    <<setw(7)<<"Gate |"\par
    <<setw(12)<<"Run Delay |"\par
    <<setw(13)<<"Gate Delay |"\par
    <<setw(6)<<"Delay"\par
    <<endl;\par
    for (int i=N_p_arr; i<N_p_arr+N_p_dep; i++)\{\par
        cout\par
        <<setw(4)<<planes[i]->id<<"|"\par
        <<setw(12)<<"Berlin|"\par
        <<setw(11)<<*(planes[i]->ap->name)<<"|"\par
        <<setw(6)<<floor((planes[i]->t_dep+curt)/60)<<":";\par
        if ((planes[i]->t_dep+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_dep+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_dep+curt)%60<<" |";\par
        \}\par
        cout<<setw(6)<<floor((planes[i]->t_arr+curt)/60)<<":";\par
        if ((planes[i]->t_arr+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_arr+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_arr+curt)%60<<" |";\par
        \}\par
        cout<<setw(9)<<floor((planes[i]->t_fact+curt)/60)<<":";\par
        if ((planes[i]->t_fact+curt)%60 > 9)\{\par
            cout<<(planes[i]->t_fact+curt)%60<<" |";\par
        \}else\{\par
            cout<<"0"<<(planes[i]->t_fact+curt)%60<<" |";\par
        \}\par
        cout<<setw(5)<<planes[i]->run_id<<"   |"\par
        <<setw(4)<<planes[i]->gate_id<<"  |";\par
        if (planes[i]->t_ch2 == 0)\{\par
            cout<<setw(12)<<"- |";\par
        \}else\{\par
            cout<<setw(7)<<floor(planes[i]->t_ch2/60)<<":";\par
            if (planes[i]->t_ch2%60 > 9)\{\par
                cout<<planes[i]->t_ch2%60<<" |";\par
            \}else\{\par
                cout<<"0"<<planes[i]->t_ch2%60<<" |";\par
            \}\par
        \}\par
        if (planes[i]->t_ch1 == 0)\{\par
            cout<<setw(13)<<"- |";\par
        \}else\{\par
            cout<<setw(8)<<floor(planes[i]->t_ch1/60)<<":";\par
            if (planes[i]->t_ch1%60 > 9)\{\par
                cout<<planes[i]->t_ch1%60<<" |";\par
            \}else\{\par
                cout<<"0"<<planes[i]->t_ch1%60<<" |";\par
            \}\par
        \}\par
        if (planes[i]->delay == 0)\{\par
            cout<<setw(6)<<"-"<<endl;\par
        \}else\{\par
            cout<<setw(3)<<floor(planes[i]->delay/60)<<":";\par
            if (planes[i]->delay%60 > 9)\{\par
                cout<<planes[i]->delay%60<<endl;\par
            \}else\{\par
                cout<<"0"<<planes[i]->delay%60<<endl;\par
            \}\par
        \}\par
    \}\par
    \par
    return 0;\par
\}\par
}
 